# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u-jbY9GHOm7rEt7MM9UzXGHpiu6JVDHg
"""


import pandas as pd
import numpy as np
import textdistance
import re
from collections import Counter

"""File opening and cleaning"""

words = []
with open('words.txt','r' , encoding='utf-8') as f:
  data = f.read()
  data = data.lower()
  word = re.findall('\w+',data)
  words+= word

print(words)

len(words)

v = set(words)

"""Build the frequency of words"""

word_freq_dict = Counter(words)

word_freq_dict.most_common(10)

"""# **Relative frequency words**

Now we want to get the probability of occurrence of each word, this equals the relative frequencies of the words:
The formula used to calculate the probability of a word in the provided code is:
Probability (word) = Frequency(word) / Total count of all words
"""

Total_words_freq = sum(word_freq_dict.values())

probs = {}
for k in word_freq_dict.keys():
  probs[k] = word_freq_dict[k]/Total_words_freq

"""# Finding Similar Words"""

def autocorrect(word):
  word = word.lower()
  if word in probs:
    print('The word is already there ',word)
  else:
    similarities = [1-(textdistance.Jaccard(2)).distance(w,word) for w in word_freq_dict.keys()]
    df = pd.DataFrame.from_dict(probs,orient='index').reset_index()
    df = df.rename(columns={'index':'Word',0:'Prob'})
    df['Similarity'] = similarities
    output = df.sort_values(['Similarity','Prob'],ascending=False).head(3)
    return output

autocorrect('hel')

autocorrect('mov')